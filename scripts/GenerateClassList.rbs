class RbvcpProjectItem
dim Ref as Integer
dim ParentRef as Integer
dim Name as String
dim isClass as Boolean

function Parent() as RbvcpProjectItem
dim p as RbvcpProjectItem = nil
for each item as RbvcpProjectItem in List
if self.ParentRef = item.Ref then
p = item
exit
end if
next
return p
end function

function FullName() as String
dim p as RbvcpProjectItem = self.Parent
if p = nil then
return self.Name
else
return p.FullName + "." + self.Name
end if
end function


shared dim List() as RbvcpProjectItem

shared function CreateFromSource(sourceLine as String) as RbvcpProjectItem
//parses a source line from .rbvcp file into an RbvcpProjectItem.  We need to create items for modules 
//for use in generating names for nested classes. 
const ItemTypeWindow = "Window"
const ItemTypeClass = "Class"
const ItemTypeModule = "Module"

dim sourceLineFields() as String = Split(sourceLine, ";")
if UBound(sourceLineFields) >= 3 then
dim ItemIdentifiers() as String = Array(ItemTypeWindow, ItemTypeClass, ItemTypeModule)
if ItemIdentifiers.IndexOf(NthField(sourceLineFields(0), "=", 1)) > -1 then
dim ClassIdentifiers() as String = Array(ItemTypeWindow, ItemTypeClass)
dim isClass as Boolean = ClassIdentifiers.IndexOf(NthField(sourceLineFields(0), "=", 1)) > -1
dim className as String = NthField(sourceLineFields(0), "=", 2)
dim ref as Integer = Val(sourceLineFields(2))
dim parentRef as Integer = Val(sourceLineFields(3))

if className <> "" and ref <> 0 then
dim item as new RbvcpProjectItem
item.isClass = isClass
item.Name = className
item.Ref = ref
item.ParentRef = parentRef
//I really should check for duplicates, and perhaps hide this list.
List.Append item
return item
else
return nil
end if
else
return nil
end if
else
//bad data, perhaps?
return nil
end if
end function
end class

function quote(path as String) as String
return """" + path + """"
end function

function cat(path as String) as String
#if targetWin32
return "copy " + quote(path) + " CON:"
#else
return "cat " + quote(path)
#endif
end function

function read_source(source_path as String) as RbvcpProjectItem()
dim itemList() as RbvcpProjectItem
dim project_lines() as String = Split(DoShellCommand(cat(source_path)), EndOfLine)
for each line as String in project_lines
dim item as RbvcpProjectItem = RbvcpProjectItem.CreateFromSource(line)
if item <> nil then
itemList.Append item
else
//source line did not describe a class/window/module
end if
next

return itemList
end function

function gettypeinfo_code(item as RbvcpProjectItem) as String
return "GetTypeInfo(" + item.FullName + ")"
end function

function GenerateArrayCode(items() as String) As String
return "return Array(" + Join(items, ", _" + EndOfLine) + ")"
end function

function filterModules(items() as RbvcpProjectItem) as RbvcpProjectItem()
dim L() as RbvcpProjectItem
for each item as RbvcpProjectItem in items
if item.IsClass then
L.Append item
end if
next
return L
end function


function is_rbvcp_file(path as String) as Boolean
const extension = ".rbvcp"
return Right(path, Len(extension)) = extension
end function

sub main()
if not is_rbvcp_file(ProjectShellPath) then
print "Frontmost project is not in RBVCP project format."
return
end if

dim current_location as String = Location
dim current_selStart as Integer = SelStart
dim current_selLength as Integer = SelLength
Location = "ClassRegistry.ClassList"

dim code() as String
for each item as RbvcpProjectItem in filterModules(read_source(ProjectShellPath))
code.Append gettypeinfo_code(item)
next

Text = "//Code generated by GenerateClassList.rbs." + EndOfLine + EndOfLine + GenerateArrayCode(code)

Location = current_location
SelStart = current_selStart
SelLength = current_selLength

end sub

main()
